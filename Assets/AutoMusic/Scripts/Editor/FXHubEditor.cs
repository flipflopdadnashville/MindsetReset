using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

using AutoMusic;
using UnityEngine.Audio;

namespace AutoMusic
{
    [CustomEditor(typeof(FXHub))]
    public class FXHubEditor : Editor
    {
        override public void OnInspectorGUI()
        {
            var module = target as FXHub;

            EditorGUI.BeginChangeCheck();

            Undo.RecordObject(module, "Edit FXHub");


            module.mixer = (AudioMixer)EditorGUILayout.ObjectField(mixerGUI, module.mixer, typeof(AudioMixer), true);
            if (module.mixer == null)
            {
                EditorGUILayout.HelpBox(
                    "Mixer field is empty : attach the AutoMusic mixer used by your sound modules to enable full functionality",
                    MessageType.Info);
            }
            if (module.mixer != null)
            {
                EditorGUILayout.Space(5);
                GUILayout.Label("Delay Settings", EditorStyles.boldLabel);
                EditorGUI.indentLevel++;
                module.delayBpmSync = EditorGUILayout.Toggle(delayBPMSync, module.delayBpmSync);

                if (module.delayBpmSync)
                {
                    module.delayTimeSteps = EditorGUILayout.IntSlider(delayTimeSteps, module.delayTimeSteps, 1, 12);
                }
                else
                {
                    module.delayTimeMS = EditorGUILayout.Slider(delayTimeMS, module.delayTimeMS, 10f, 1000f);
                }
                module.delayDecay = EditorGUILayout.Slider(delayDecay, module.delayDecay, 0f, 1f);
                EditorGUI.indentLevel--;
            }
            EditorGUILayout.Space(10);
            module.directSoundSpatialisation = EditorGUILayout.Toggle(directSoundSpatialisation, module.directSoundSpatialisation);
            


            if (EditorGUI.EndChangeCheck())
            {
                EditorUtility.SetDirty(module);
                serializedObject.ApplyModifiedProperties();
            }
        }

        GUIContent mixerGUI = new GUIContent("Audio Mixer", "A link to the Unity Audio Mixer");
        GUIContent delayBPMSync = new GUIContent("Delay BPM Sync", "Sync the delay rate to the Master Clock BPM");
        GUIContent delayTimeSteps = new GUIContent("Delay Time Steps", "Rate of dalay, measured in steps");
        GUIContent delayTimeMS = new GUIContent("Delay Time MS", "Rate of dalay, measured in milliseconds");
        GUIContent delayDecay = new GUIContent("Delay Decay", "How rapidly the delay repeats fade in volume");
        GUIContent SidechainSrcModules = new GUIContent("Sidechain Src Modules", "Modules to use as trigger generators for the sidechain compressor effect");
        GUIContent directSoundOverdrive = new GUIContent("Direct Sound Overdrive", "Amount of overdrive/distortion to apply on Modules using the DirectSound/synth output modes: 0 is none, 1 is wild");
        GUIContent directSoundSpatialisation = new GUIContent("Direct Sound Spatialisation", "Use standard Unity AudioSource distance/panning spatialisation with DirectSound modules (requires 3D sound to be set on the modules AudioSources)");
        GUIContent sidechainCurve = new GUIContent("Sidechain Curve", "Shape of the volume envelope to generate from sidechain triggers. Modules receive a fraction of this curve based on their individual sidechain compression parameters");
        GUIContent sidechainCurveDurationBeats = new GUIContent("Sidechain Duration in Beats", "The duration (in musical beats) of the envelope generated by sidechain triggers");
        GUIContent sidechainMinTriggerVelocity = new GUIContent("Sidechain Minimum Trigger Velocity", "Notes with velocity lower than this number will be ignored by the sidechain envelope generator");
    }
}